# GLM Demo
## Purpose
This app is to show how to do the following:

1. Extend the REST API
1. Configure and test leading wildcard searches
1. Best Approaches for Schema-agnostic data
1. Multi-Statement ACID Transactions
1. Best Approaches for storing and retrieving spreadsheet data.
1. Bi-Temporal Data Structure and Query used for Point-In-Time Audits
1. Triplestore Document Linking
1. Triplestore Queries for Forward and Backward Chain Inferencing


## Deploy
* $ ml local bootstrap
* $ ml local modules
* $ ml local deploy content

Content deploy copies zip file to database. Need to run the following snippet in qconsole to inflate data.

<pre>

declare namespace zip="xdmp:zip";

let $_ :=
  for $x in xdmp:zip-manifest(fn:doc("/files.zip"))//zip:part/text()
    let $doc :=
      xdmp:zip-get(fn:doc("/files.zip"), $x,
        <options xmlns="xdmp:zip-get">
          <format>xml</format>
        </options>
      )
  
  let $uri := fn:replace($x, "test/", "/glm/")
    return
      xdmp:document-insert($uri, $doc)

let $_ := xdmp:document-delete("/files.zip")

return "done"

</pre>


# RESTful APIs

<table>
    <tr>
        <td colspan="4" style="font-size:x-large;color:green">Request Mappings</td>
    </tr>
    <tr>
        <td width="120" style="background-color:green;color:white">**Method**</td>
        <td width="200" style="background-color:green;color:white">**URL Template**</td>
        <td width="300" style="background-color:green;color:white">**Parameters**</td>
        <td width="700" style="background-color:green;color:white">**Description**</td>
    </tr>
    <tr>
        <td valign="top">GET</td>
        <td valign="top">/search</td>
        <td valign="top">rs:q, rs:start, rs:pageLength</td>
        <td valign="top" style ="font-family:'Courier New'">Returns search results</td>
    </tr>
    <tr>
        <td valign="top">GET</td>
        <td valign="top">/document</td>
        <td valign="top">rs:uri</td>
        <td valign="top" style ="font-family:'Courier New'">Returns document</td>
    </tr>
    <tr>
        <td valign="top">PUT</td>
        <td valign="top">/document</td>
        <td valign="top">rs:uri and XML payload</td>
        <td valign="top" style ="font-family:'Courier New'">Updates document using payload</td>
    </tr>
    <tr>
        <td valign="top">POST</td>
        <td valign="top">/document</td>
        <td valign="top">No url parameter. Requires an XML payload.</td>
        <td valign="top" style ="font-family:'Courier New'">Creates new document using XML payload and returns success or fail status.</td>
    </tr>
    <tr>
        <td valign="top">DELETE</td>
        <td valign="top">/document</td>
        <td valign="top">rs:uri</td>
        <td valign="top" style ="font-family:'Courier New'">Deletes document</td>
    </tr>
    <tr>
        <td valign="top">GET</td>
        <td valign="top">/transactions</td>
        <td valign="top">No url paramters or payload.</td>
        <td valign="top" style ="font-family:'Courier New'">Returns transaction status of all transaction in the system.</td>
    </tr>
    <tr>
        <td valign="top">POST</td>
        <td valign="top">/transactions</td>
        <td valign="top">rs:txid (optional), rs:result=(commit|rollback) (optional)</td>
        <td style ="font-family:'Courier New'">If no rs:txid is given then a new transactional context is created and a transactionid is returned. If an rs:txid and rs:result is provided then transaction is either committed or rolled back. It will also discard the transactional context so that the transaction-id is not longer valid.</td>
    </tr>
</table>




# Roxy
Roxy (RObust XQuerY Framework) is a lightweight framework for quickly developing well-structured, easily maintained XQuery applications. Roxy was heavily inspired by Ruby On Rails and CakePHP.

## Getting Help
To get help with Roxy,

* Subscribe to the [Roxy mailing list](http://developer.marklogic.com/mailman/listinfo/roxy)
* Read up on [the wiki](https://github.com/marklogic/roxy/wiki)
* Check out the [Tutorials page](https://github.com/marklogic/roxy/wiki/Tutorials)

## Components
### Roxy Deployer
Roxy Deployer makes managing MarkLogic application easy. Simply edit a few configuration files and you have full access to create and deploy applications to MarkLogic servers, local or remote. Roxy Deployer is written in Ruby and is easily extended to add additional functionality.

### Roxy mVC
The meat and potatoes of Roxy, the mVC (with a de-emphasis on m) is a light-weight MVC framework fashioned after Ruby on Rails and CakePHP. It relies heavily on **Convention over Configuration**.

### Roxy Unit Tester
What good is your code if it doesn't work? Testing is paramount to the development process. The Roxy Unit Tester tests XQuery with XQuery. Write your tests in XQuery and run them from the UI or from the command line. Roxy Unit Tester produces JUnit XML output so you can use it with your favorite continuous testing tool.

## Requirements
* MarkLogic ([notes on supported versions](https://github.com/marklogic/roxy/wiki/Supported-MarkLogic-versions)):
  * MarkLogic 4.x - You need the **Docs** appserver running on port 8000 - this port can be overridden in build.properties
  * MarkLogic 5.x - You need the **Manage** appserver running on port 8002 - this port can be overridden in build.properties
  * MarkLogic 6.x - You need the **Manage** appserver running on port 8002 - this port can be overridden in build.properties
  * MarkLogic 7.x -
* [Ruby 1.9.3+](http://www.ruby-lang.org/en/) - Required for Roxy Deployer only.
* [Java (jdk)](http://www.oracle.com/technetwork/java/javase/downloads/index.html) - Only if you wish to run the Roxy Deployer [XQSync](http://developer.marklogic.com/code/xqsync, XQSync) or [RecordLoader](http://developer.marklogic.com/code/recordloader) commands.
* [Git](http://git-scm.com/downloads) - Required to create a new project using "ml new".

## Getting Started (Quick Version)
This section describes the quickest way to get started using Roxy.

### Assumptions
* You already have one or more MarkLogic Servers running somewhere that you can access from your computer. If not, get it [here](http://developer.marklogic.com/products).*
* You know the admin logon to your MarkLogic Server(s)

### Download Roxy
`$ git clone git://github.com/marklogic/roxy.git`

### Configure your application
1. Open a command prompt in the root folder of Roxy
2. Run ml init to create sample configuration files (must specify --server-version option with a value of 4, 5, 6 or 7)
  <pre><code>$ ml init app-name --server-version=[version-number]</code></pre>
3. Modify deploy/build.properties with your application's settings.

<pre><code># Username to authenticate to ML
user=your-ml-admin-username
# password for ML authentication
password=your-ml-admin-password
# the authentication type for the appserver (digest|basic|application-level)
authentication-method=application-level
# the default user to authenticate with. defaults to nobody
default-user=${app-name}-user
# Specify the server(s) you wish to deploy to here. This tutorial assumes you are using localhost.
local-server=localhost
#dev-server=
#prod-server=
</code></pre>

### Configure MarkLogic Server
*This step is only needed when database configurations have changed or on a fresh install. In most cases you will not need to restart your server.*

1. Open a command prompt in the root folder of Roxy.
  *If your server is not configured as local-server in build.properties then substitute your environment here ( local | dev | prod )*
2. `$ ml local bootstrap`
3. Depending on what, if anything, you changed you may need to restart MarkLogic in order to proceed. If you see output telling you to restart...
  <pre><code>$ ml local restart</code></pre>

### Deploying Code
*This step describes how to deploy your Roxy application into your MarkLogic Server modules database. If you have elected to run your code locally out of the filesystem you do not need to do this.*

1. Open a command prompt in the root folder of Roxy
2. `$ ml local deploy modules`
3. Open your favorite web browser to http://localhost:port

  *Sub in your hostname and port from build.properties*

### Congratulations
**Congratulations!** You have Roxy running on your server. Now you need to start customizing it.

## Getting Help
For more information run:
  `$ ml -h`
